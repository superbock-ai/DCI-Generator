services:
  redis:
    image: redis:7-alpine
    container_name: dci-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - dci-network

  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    image: dci-worker
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./worker/debug:/app/debug
      - ./worker/exports:/app/exports
    networks:
      - dci-network
    restart: unless-stopped
    scale: 1  # Run 1 worker instances by default

  broker:
    build:
      context: .
      dockerfile: broker/Dockerfile
    image: dci-broker
    container_name: dci-broker
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - dci-network
    restart: unless-stopped

volumes:
  redis_data:
    driver: local

networks:
  dci-network:
    driver: bridge